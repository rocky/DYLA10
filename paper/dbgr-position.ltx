\documentclass[10pt, a4paper]{article}
\fontfamily{phv}\selectfont

\setlength{\headsep}{0in}
\setlength{\headheight}{0in}
\setlength{\parindent}{0in}
\setlength{\parskip}{11pt}
\setlength{\textwidth}{6.5in}
\setlength{\itemsep}{0in}
\setlength{\parsep}{0in}
\setlength{\textheight}{9in}
\setlength{\topmargin}{0in}
\setlength{\evensidemargin}{-0.1in}
\setlength{\oddsidemargin}{-0.1in}
\usepackage{layout}

\begin{document}
\title{Debuggers in Dynamic Languages}
\author{Rocky Bernstein}
\maketitle

\section{Introduction}
I have written debuggers for a number of dynamic languages, and have
found that additional run-time support invariably needs to be
added. It seems that the state of the art in debugging has been not
been improving. It is not that the Integrated Development Environments
(IDEs) are worse, but that the foundation that they have to interact
with is. Test- and behavior-driven development, interactive shells, modular
and functional programming, and proving programs correct are all
valuable techniques which reduce the importance of debuggers and
debugging, but they do not eliminate it.

Practical support for debugging is often weak. Consider a typical
systems administrator who may not be all that interested in
programming languages and programming-language theory. When something
goes wrong, he or she may have to troubleshoot and fix a complex,
non-modular, untestable program written by someone
else. And instead of having a simple, lightweight tool to diagnose the
problem, there may be only a complex and heavyweight IDE that poses
problems of its own.

At the other, theoretical, end of the spectrum there are authors and
teachers of a particular programming language who devote much more
time to the programming language's theory and design than to the
mundane task of debugging an existing program. Consequently, in many
reference manuals for popular dynamic programming languages like Ruby,
Scala, or Python, there is only a little sketchy information on
debuggers or debugging.

Perhaps such lack of interest in debuggers is partially because the
debuggers are very weak, which is in turn because of the lack of support
inside the language: a little bit of a bootstrapping problem. And
perhaps lack of support partially stems from confusion about what is
needed at run time, and about how to write a debugger in a modular,
testable, and debuggable way---it is an unfortunate fact that many
debuggers cannot debug themselves.

Below I describe some of the commonly missing features. Many of these
are not specific to debugging or dynamic
languages; better error-location reporting is one of these.

\section{Run-time support}
\subsection{Position information}
When a debugger is added to a programming language, invariably one of
the first things noticed is that there are bugs in how the program
reports source locations. A common example: in languages that allow a
statement to span several lines, the location line for the entire
statement is recorded where the statement ends rather than where it
starts. Generally this is because the location comes from the position
information of the scanner (usually a global integer variable
containing a line number) when the statement ended; saving information
about where the statement started requires additional work. The best
practice would be to give a range of locations telling where the
statement starts and where it ends.

Programmers tend to tolerate, although they do not appreciate, some
fuzziness when the programming language reports a fatal error in the
program. However such vagueness such as whether the debugged program
is stopped before or after a particular line of code cannot be
tolerated in a debugger. A programmer has to be able to set a stopping
point that is both precise and feels natural, that is, matches his
understanding of the source code rather than the machine's
understanding of the object code.

I propose that the concept of ``position'' contains two parts: a
container and a place within that container. These correspond roughly
to the traditional ``file'' and ``line number.'' However, in dynamic
languages the source code does not always come from a file. It can
come from a program object (e.g., a string), or it can be a member of
a package of files (e.g., Java jar, or Python egg). So a container
should have the ability to refer to other containers. Position inside
a container poses a number of other problems. One is that ``line'' is
a bit vague. Perhaps a range of lines would be better, or possibly
character offsets, or a range of line- and column-number pairs.

A second problem with reporting the position for a stopped location is
that there may be many source-code positions that correspond to a
stopped location.  With code optimization, such as
common-subexpression elimination, a single VM or machine instruction
could map to sets of positions in a source program.

There are various ways to solve this problem; for example, all the
possible corresponding positions can be listed. The important point is
that all the information about the positions within the containers
must be preserved.

\subsection{Information to verify that source code matches object code}
Dynamic languages often provide file-name information for source
files, but are missing checksum-like information so that one can
verify that what the programmer is looking at matches what the
interpreter is running. This problem is especially serious if the
front-end IDE is different from the one where the program is running
(``remote debugging'') or when the programming language runs code from
a bundled library.

This is easy to solve if the compiler runs a checksum as part of the
scanning process, and then stores the result in the object.

\subsection{Breakpoint support}
Many dynamic languages provide debugging support via a trace mechanism
which issues a callback to a hook. The debugger writer develops the hook
in the language to be debugged and makes a call to register
it. Python, POSIX shells, and Ruby all work this way. However in
none of these languages can one set breakpoints for the interpreter
within the interpreter. A notable exception to this is Perl.

The hook code must look at location information and determine when a
breakpoint has been encountered. Switching back and forth between
running program and hook code, and the additional overhead of checking
position information, are slow. When debugging a program slows it
down, the programmer is discouraged from using a debugger, and then
has to devise ways of circumventing flaws in the run-time
debugging. The most common workaround is to change the source code to
put a call to the debugger where the programmer wants to stop. This
allows the program to run at full speed until the point when the
debugger is needed, making use of dynamic facility of the programming
language to pull in code at any time.

However what is really needed is a way to register a stopping point
inside the interpreter. Full support for handling conditions under
which one needs to stop is not needed. Even support for one-time or
temporary breakpoints is not necessary---that can all be done in the
higher-level code outside of the interpreter. But some support inside
the interpreter is extremely useful in order to handle breakpoints
well.

Here are some techniques for allowing for breakpoints inside an
interpreter: One of the oldest techniques, used for example in IBM
mainframe assembly code, is to patch over the instruction sequence
with a ``trap'' instruction. One needs to store the overwritten
instruction and simulate it when the trap is over. With a virtual
machine, a similar and perhaps simpler way is to store a trap bit in
the VM opcode. In my experimental Ruby 1.9 debugger, I allocate a
parallel byte vector for each instruction sequence on demand where the
programmer has set a breakpoint.

\section{High-level and low-level debugging}
There is a dichotomy between high-level (language level) debuggers and
low-level (VM instruction) debuggers. The popular debugger gdb is
basically a low-level debugger that tries to add support for some
high-level languages. Debuggers can also go the other way around, but
they usually do not. Ruby and Python debuggers (other than the ones I
have written) do not allow for VM or bytecode inspection. In one case
where I requested more access to the lower-level structures, the VM
writer resisted because of fear of giving low-level access to an
average programmer. Debuggers in dynamic languages, then, are not seen
as tools for the compiler writer, \emph{i.e.,}\ for testing code generation
or optimization techniques. This is yet another reason why support for
debuggers in such languages is weak.

Similarly the debugger is not seen as a vehicle for allowing the
programmer to understand what optimization and code improvements have
been performed on the program. In Ruby, a compiler-option table is
removed after compilation; it is not kept for dynamic inspection
(although this may be fixed in a future release). And recursion
elimination is turned off by default for fear that it would confuse
programmers. Instead, adding a small amount of information to the
object would allow a debugger to report such transformations when they
occur, and I think that would be sufficient.

With gdb and gcc, programmers often debug optimized code, where
sequential statements might be run in a different order from that
given in the program. Unfortunately, code optimizers typically do not
record information about the code motion performed on a program,
although this would not be difficult, and it would help a programmer
follow execution of the program.

Suppose that whenever an instruction is moved by a code optimizer,
information indicating that the instruction is not in its original
location is recorded alongside the instruction stream. Then whenever a
debugger is stopped on that instruction, it could issue a
warning. If the optimizer recorded that the code was moved ``up,'' the
debugger would scan forward in the instruction sequence until a
branching point for the first instruction that was not moved. This
location could be reported as the current position, noting that an
instruction from further down is about to be run. A similar procedure
would apply if an instruction moved ``down,'' but scanning backward
rather than forward.

This example brings up a question regarding the high-level
\emph{vs.}\ low level dichotomy: do we try to hide underlying
mechanisms or to expose them? There is no one set answer. For code
motion, the example above does both. Although programmers generally
prefer to think of code in a higher-level way that matches the
source-code, upon programmer's request, or when not enough information
has been recorded to confidently present things in a higher-level way,
the full low-level details should be available.

\section{Demo material}

I would like to demonstrate some novel aspects of my debugger for Ruby
1.9.

They include better position information for code generated
dynamically (for example, from inside a Ruby program) or from a string
inside a C method. I will show the difference between fast and
traditional breakpoint support. Possibly I will implement some of the
more novel aspects described above: recursion-elimination reporting
and instruction code motion.

The debugger has been structured to make it easy to add
commands---programmers can supply a directory of their own
commands. Also, after having used it in a couple of dynamic languages,
I think that the overall structure of the debugger is sound.

It is also easy to debug the debugger itself, either by inspecting
debugger variables or by modifying the debugger while it is running. I
often fix debugger bugs without leaving a debugger session that is
currently debugging another program. This might make an interesting
demonstration.

Although I'll be demonstrating on Ruby, I have written debuggers for
other dynamic languages. My goal and motivation for submitting a
proposal to this organization is to seek out developers of other
high-level dynamic languages in order to facilitate good debugging
tools.

% \layout*

\end{document}
